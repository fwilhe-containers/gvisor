// automatically generated by stateify.

package nvproxy

import (
	"context"

	"gvisor.dev/gvisor/pkg/state"
)

func (dev *frontendDevice) StateTypeName() string {
	return "pkg/sentry/devices/nvproxy.frontendDevice"
}

func (dev *frontendDevice) StateFields() []string {
	return []string{
		"nvp",
		"minor",
	}
}

func (dev *frontendDevice) beforeSave() {}

// +checklocksignore
func (dev *frontendDevice) StateSave(stateSinkObject state.Sink) {
	dev.beforeSave()
	stateSinkObject.Save(0, &dev.nvp)
	stateSinkObject.Save(1, &dev.minor)
}

func (dev *frontendDevice) afterLoad(context.Context) {}

// +checklocksignore
func (dev *frontendDevice) StateLoad(ctx context.Context, stateSourceObject state.Source) {
	stateSourceObject.Load(0, &dev.nvp)
	stateSourceObject.Load(1, &dev.minor)
}

func (n *nvproxy) StateTypeName() string {
	return "pkg/sentry/devices/nvproxy.nvproxy"
}

func (n *nvproxy) StateFields() []string {
	return []string{
		"version",
		"clients",
	}
}

// +checklocksignore
func (n *nvproxy) StateSave(stateSinkObject state.Sink) {
	n.beforeSave()
	stateSinkObject.Save(0, &n.version)
	stateSinkObject.Save(1, &n.clients)
}

// +checklocksignore
func (n *nvproxy) StateLoad(ctx context.Context, stateSourceObject state.Source) {
	stateSourceObject.Load(0, &n.version)
	stateSourceObject.Load(1, &n.clients)
	stateSourceObject.AfterLoad(func() { n.afterLoad(ctx) })
}

func (o *object) StateTypeName() string {
	return "pkg/sentry/devices/nvproxy.object"
}

func (o *object) StateFields() []string {
	return []string{
		"nvp",
		"client",
		"class",
		"handle",
		"impl",
		"deps",
		"rdeps",
		"objectFreeEntry",
	}
}

func (o *object) beforeSave() {}

// +checklocksignore
func (o *object) StateSave(stateSinkObject state.Sink) {
	o.beforeSave()
	stateSinkObject.Save(0, &o.nvp)
	stateSinkObject.Save(1, &o.client)
	stateSinkObject.Save(2, &o.class)
	stateSinkObject.Save(3, &o.handle)
	stateSinkObject.Save(4, &o.impl)
	stateSinkObject.Save(5, &o.deps)
	stateSinkObject.Save(6, &o.rdeps)
	stateSinkObject.Save(7, &o.objectFreeEntry)
}

func (o *object) afterLoad(context.Context) {}

// +checklocksignore
func (o *object) StateLoad(ctx context.Context, stateSourceObject state.Source) {
	stateSourceObject.Load(0, &o.nvp)
	stateSourceObject.Load(1, &o.client)
	stateSourceObject.Load(2, &o.class)
	stateSourceObject.Load(3, &o.handle)
	stateSourceObject.Load(4, &o.impl)
	stateSourceObject.Load(5, &o.deps)
	stateSourceObject.Load(6, &o.rdeps)
	stateSourceObject.Load(7, &o.objectFreeEntry)
}

func (l *objectFreeList) StateTypeName() string {
	return "pkg/sentry/devices/nvproxy.objectFreeList"
}

func (l *objectFreeList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (l *objectFreeList) beforeSave() {}

// +checklocksignore
func (l *objectFreeList) StateSave(stateSinkObject state.Sink) {
	l.beforeSave()
	stateSinkObject.Save(0, &l.head)
	stateSinkObject.Save(1, &l.tail)
}

func (l *objectFreeList) afterLoad(context.Context) {}

// +checklocksignore
func (l *objectFreeList) StateLoad(ctx context.Context, stateSourceObject state.Source) {
	stateSourceObject.Load(0, &l.head)
	stateSourceObject.Load(1, &l.tail)
}

func (e *objectFreeEntry) StateTypeName() string {
	return "pkg/sentry/devices/nvproxy.objectFreeEntry"
}

func (e *objectFreeEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (e *objectFreeEntry) beforeSave() {}

// +checklocksignore
func (e *objectFreeEntry) StateSave(stateSinkObject state.Sink) {
	e.beforeSave()
	stateSinkObject.Save(0, &e.next)
	stateSinkObject.Save(1, &e.prev)
}

func (e *objectFreeEntry) afterLoad(context.Context) {}

// +checklocksignore
func (e *objectFreeEntry) StateLoad(ctx context.Context, stateSourceObject state.Source) {
	stateSourceObject.Load(0, &e.next)
	stateSourceObject.Load(1, &e.prev)
}

func (dev *uvmDevice) StateTypeName() string {
	return "pkg/sentry/devices/nvproxy.uvmDevice"
}

func (dev *uvmDevice) StateFields() []string {
	return []string{
		"nvp",
	}
}

func (dev *uvmDevice) beforeSave() {}

// +checklocksignore
func (dev *uvmDevice) StateSave(stateSinkObject state.Sink) {
	dev.beforeSave()
	stateSinkObject.Save(0, &dev.nvp)
}

func (dev *uvmDevice) afterLoad(context.Context) {}

// +checklocksignore
func (dev *uvmDevice) StateLoad(ctx context.Context, stateSourceObject state.Source) {
	stateSourceObject.Load(0, &dev.nvp)
}

func (v *DriverVersion) StateTypeName() string {
	return "pkg/sentry/devices/nvproxy.DriverVersion"
}

func (v *DriverVersion) StateFields() []string {
	return []string{
		"major",
		"minor",
		"patch",
	}
}

func (v *DriverVersion) beforeSave() {}

// +checklocksignore
func (v *DriverVersion) StateSave(stateSinkObject state.Sink) {
	v.beforeSave()
	stateSinkObject.Save(0, &v.major)
	stateSinkObject.Save(1, &v.minor)
	stateSinkObject.Save(2, &v.patch)
}

func (v *DriverVersion) afterLoad(context.Context) {}

// +checklocksignore
func (v *DriverVersion) StateLoad(ctx context.Context, stateSourceObject state.Source) {
	stateSourceObject.Load(0, &v.major)
	stateSourceObject.Load(1, &v.minor)
	stateSourceObject.Load(2, &v.patch)
}

func init() {
	state.Register((*frontendDevice)(nil))
	state.Register((*nvproxy)(nil))
	state.Register((*object)(nil))
	state.Register((*objectFreeList)(nil))
	state.Register((*objectFreeEntry)(nil))
	state.Register((*uvmDevice)(nil))
	state.Register((*DriverVersion)(nil))
}
